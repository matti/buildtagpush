#!/usr/bin/env bash
set -euo pipefail
_output() {
  echo ""
  echo "ðŸ›  (${SECONDS}s) $@"
}

_output "START: $(date)"

case "${1:-}" in
  trypull)
    images="${@:2}"
    _output "try pull"

    for image in $images; do
      (
        docker pull "$image" || true
      ) 2>&1 | sed -le "s#^#ðŸ›  (${SECONDS}s) trypull $image -- #;" &
    done

    wait $(jobs -p)

    _output "OK -- trypull"
    exit 0
  ;;
esac

export BUILDKIT_PROGRESS=plain
export DOCKER_BUILDKIT=1

export TAG=${TAG:-latest}
export CACHE_TAG=${CACHE_TAG:-$TAG}
export WORKDIR=${WORKDIR:-/workspace}
export DOCKERFILE=${DOCKERFILE:-Dockerfile}
export BUILD_OPTS=${BUILD_OPTS:-}
export TRIES=${TRIES:-6}

cd "$WORKDIR"

_output "pwd: $(pwd)"
_output "nproc: $(nproc)"
_output "docker version:"


printf "$(docker version)"
echo ""

_output "export:"
export

if >/dev/null DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect "$REGISTRY/$IMAGE:$TAG"; then
  _output "Image $REGISTRY/$IMAGE:$TAG already exists, stopping here."
  _output "OK -- NOP"
  exit 0
fi

_output "Dockerfile: ${DOCKERFILE}"
cat "$DOCKERFILE"

_output "PULL images"

if [ "$CACHE_TAG" != "$TAG" ]; then
  (
    pulled=no
    for ((try=1; try<=$TRIES; try++)); do
      if docker pull "$REGISTRY/$IMAGE:$CACHE_TAG"; then
        pulled=yes
        break
      fi
      _output "pull failed, retry"
      sleep 1
    done

    if [[ "$pulled" == "no" ]]; then
      _output "pull failed, this is okay as it is cache"
    fi
  ) 2>&1 | sed -le "s#^#ðŸ›  (${SECONDS}s) pull cache :$CACHE_TAG -- #;" &
fi

wait $(jobs -p)

_output "BUILD $REGISTRY/$IMAGE:$TAG with cache from $REGISTRY/$IMAGE:$CACHE_TAG"

(
  for ((try=1; try<=$TRIES; try++)); do
    # NOTE: $BUILD_OPTS needs to be without quotes to expand properly
    if docker build -f "$DOCKERFILE" --cache-from="$REGISTRY/$IMAGE:$CACHE_TAG" --build-arg BUILDKIT_INLINE_CACHE=1 -t "$REGISTRY/$IMAGE:$TAG" $BUILD_OPTS .; then
      break
    else
      if [ "$try" = "$TRIES" ]; then
        echo "last attempt failed, exit 1"
        exit 1
      else
        echo "$try attempt failed, sleep $try"
        sleep "$try"
      fi

      echo "trying to pull deps"
      # https://github.com/moby/moby/issues/40262#issuecomment-656036657)
      from_images=""
      copy_froms=""
      set +e
        # remofe --platform=... etc
        from_images=$(cat "$DOCKERFILE" | grep FROM | sed 's/\s--.*\s/ /' | cut -d' ' -f2)
        copy_froms=$(cat "$DOCKERFILE" | grep "COPY --from=" | cut -d'=' -f2 | cut -d' ' -f1)
      set -e

      for image in $from_images $copy_froms; do
        case $image in
          scratch|cache)
            continue
          ;;
        esac

        (
          docker pull "$image" || true
        ) 2>&1 | sed -le "s#^#ðŸ›  (${SECONDS}s) pull dep $image -- #;" &
      done

      wait $(jobs -p)

      echo "deps pulled, trying one more time"
    fi
  done
) 2>&1 | sed -le "s#^#ðŸ›  (${SECONDS}s) build -- #;"

(
  exec docker tag "$REGISTRY/$IMAGE:$TAG" "$REGISTRY/$IMAGE:$CACHE_TAG"
) 2>&1 | sed -le "s#^#ðŸ›  (${SECONDS}s) tag -- #;"

(
  pushed=no
  for ((try=1; try<=$TRIES; try++)); do
    if docker push "$REGISTRY/$IMAGE:$TAG"; then
      pushed=yes
      break
    fi
    _output "push failed, retry"
    sleep 1
  done

  if [[ "$pushed" == "no" ]]; then
    _output "push failed."
    exit 1
  fi
) 2>&1 | sed -le "s#^#ðŸ›  (${SECONDS}s) push tag :$TAG -- #;" &

if [ "$CACHE_TAG" != "$TAG" ]; then
  (
    pushed=no
    for ((try=1; try<=$TRIES; try++)); do
      if docker push "$REGISTRY/$IMAGE:$CACHE_TAG"; then
        pushed=yes
        break
      fi
      _output "push failed, retry"
      sleep 1
    done

    if [[ "$pushed" == "no" ]]; then
      _output "push failed."
      exit 1
    fi
  ) 2>&1 | sed -le "s#^#ðŸ›  (${SECONDS}s) push cache :$CACHE_TAG -- #;"
fi

wait

_output "OK -- all"
